import string
import secrets

def generate_password(length=12, use_upper=True, use_digits=True, use_symbols=True):
    """
    Generates a secure and randomized password.
    
    Args:
        length (int): Length of the password.
        use_upper (bool): Include uppercase letters.
        use_digits (bool): Include digits.
        use_symbols (bool): Include special characters.

    Returns:
        str: A secure randomized password.
    """
    if length < 4:
        raise ValueError("Password length should be at least 4 characters.")

    # Base character set
    characters = list(string.ascii_lowercase)
    
    if use_upper:
        characters.extend(string.ascii_uppercase)
    if use_digits:
        characters.extend(string.digits)
    if use_symbols:
        characters.extend("!@#$%^&*()-_=+[]{}|;:,.<>?/")

    # Ensure password has at least one of each selected type
    password = []
    if use_upper:
        password.append(secrets.choice(string.ascii_uppercase))
    if use_digits:
        password.append(secrets.choice(string.digits))
    if use_symbols:
        password.append(secrets.choice("!@#$%^&*()-_=+[]{}|;:,.<>?/"))
    password.append(secrets.choice(string.ascii_lowercase))

    # Fill the rest with random choices from full character set
    while len(password) < length:
        password.append(secrets.choice(characters))

    # Shuffle to avoid predictable pattern
    secrets.SystemRandom().shuffle(password)
    return ''.join(password)

# Example usage
if __name__ == "__main__":
    print("Generated Password:", generate_password(length=16))
